{"mappings":"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","sources":["src/partials/weather/fetchWeatherData.js","src/partials/weather/weather.js"],"sourcesContent":["import axios from 'axios';\nexport { fetchWeatherData };\n\nasync function getCurrentWeather(lat, lon, api_key) {\n  const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${api_key}&units=metric`;\n  try {\n    const response = await axios.get(url);\n    const data = response.data;\n    console.log(`Location: ${data.name}, ${data.sys.country}`);\n    console.log(`Weather now: ${data.weather[0].description}`);\n    console.log(`Temperature: ${data.main.temp}°C`);\n\n    const date = new Date();\n    const options = {\n      // weekday: 'short',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    };\n    const formattedDate = date.toLocaleDateString('en-US', options);\n    const weekday = date.toLocaleString('en-US', { weekday: 'long' });\n\n    const degreesEl = document.querySelector('.degrees');\n    const whatsTheWeatherEl = document.querySelector('.whats-the-weather');\n    const locationEl = document.querySelector('.location');\n    const weekDayEl = document.querySelector('.week-day');\n    const weatherDateEl = document.querySelector('.weather-date');\n\n    degreesEl.innerHTML = `${Math.round(data.main.temp)}°`;\n    whatsTheWeatherEl.innerHTML = data.weather[0].description;\n    locationEl.innerHTML = data.name;\n    weekDayEl.innerHTML = weekday;\n    weatherDateEl.innerHTML = formattedDate;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getWeatherForecast(lat, lon, api_key) {\n  const url = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${api_key}&units=metric`;\n  try {\n    const response = await axios.get(url);\n    const data = response.data;\n    console.log(\n      `5-day weather forecast for the location: ${data.city.name}, ${data.city.country}`\n    );\n    const forecastList = data.list;\n    forecastList.forEach(forecast => {\n      const date = new Date(forecast.dt * 1000);\n      // console.log(`Date: ${date.toDateString()}`);\n      // console.log(`Weather: ${forecast.weather[0].description}`);\n      // console.log(`Temperature: ${forecast.main.temp}°C`);\n      // console.log(`Wind: ${forecast.wind.speed} m/s`);\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function fetchWeatherData() {\n  try {\n    const position = await getPosition();\n    const lat = position.coords.latitude;\n    const lon = position.coords.longitude;\n    const api_key = 'ba95449c69063d2989b1d45f265b0f98';\n    await getCurrentWeather(lat, lon, api_key);\n    await getWeatherForecast(lat, lon, api_key);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction getPosition() {\n  return new Promise((resolve, reject) => {\n    navigator.geolocation.getCurrentPosition(\n      position => resolve(position),\n      error => {\n        console.log(error);\n\n        const defaultPosition = {\n          coords: { latitude: 51.5072, longitude: -0.1276 },\n        };\n        resolve(defaultPosition);\n      }\n    );\n  });\n}\n","import { fetchWeatherData } from './fetchWeatherData';\nfetchWeatherData();\n"],"names":["$bpxeT","parcelRequire","$4788e5de1230cb42$var$getCurrentWeather","lat","lon","api_key","$4788e5de1230cb42$var$_getCurrentWeather","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","url","response","data","date","options","formattedDate","weekday","degreesEl","whatsTheWeatherEl","locationEl","weekDayEl","weatherDateEl","concat","$dIxxU","default","get","_ctx","sent","console","log","name","sys","country","weather","description","main","temp","Date","year","month","day","toLocaleDateString","toLocaleString","document","querySelector","innerHTML","Math","round","t0","$4788e5de1230cb42$var$getWeatherForecast","$4788e5de1230cb42$var$_getWeatherForecast","city","list","forEach","forecast","dt","$4788e5de1230cb42$var$_fetchWeatherData","position","$4788e5de1230cb42$var$getPosition","coords","latitude","longitude","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","error"],"version":3,"file":"index.42741d32.js.map"}