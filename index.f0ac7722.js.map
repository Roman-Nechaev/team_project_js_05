{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAqCAC,eAAeC,IACb,IACE,MAAMC,QAYD,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,UAAUC,YAAYC,mBAAmBJ,EAASC,EAAO,IAZnDI,EAAMP,EAASQ,OAAOC,SACtBC,EAAMV,EAASQ,OAAOG,UACtBC,EAAU,yCAvCpBd,eAAiCS,EAAKG,EAAKE,GACzC,MAAMC,EAAM,uDAAuDN,SAAWG,WAAaE,iBAC3F,IACE,MACME,SADiBlB,EAAAmB,QAAMC,IAAIH,IACXC,KACtBG,QAAQC,IAAI,aAAaJ,EAAKK,SAASL,EAAKM,IAAIC,WAChDJ,QAAQC,IAAI,gBAAgBJ,EAAKQ,QAAQ,GAAGC,eAC5CN,QAAQC,IAAI,gBAAgBJ,EAAKU,KAAKC,S,CACtC,MAAOC,GACPT,QAAQC,IAAIQ,E,EA+BNC,CAAkBpB,EAAKG,EAAKE,SA3BtCd,eAAkCS,EAAKG,EAAKE,GAC1C,MAAMC,EAAM,wDAAwDN,SAAWG,WAAaE,iBAC5F,IACE,MACME,SADiBlB,EAAAmB,QAAMC,IAAIH,IACXC,KACtBG,QAAQC,IACN,4CAA4CJ,EAAKc,KAAKT,SAASL,EAAKc,KAAKP,WAEtDP,EAAKe,KACbC,SAAQC,IACnB,MAAMC,EAAO,IAAIC,KAAmB,IAAdF,EAASG,IAC/BjB,QAAQC,IAAI,SAASc,EAAKG,kBAC1BlB,QAAQC,IAAI,YAAYa,EAAST,QAAQ,GAAGC,eAC5CN,QAAQC,IAAI,gBAAgBa,EAASP,KAAKC,UAC1CR,QAAQC,IAAI,SAASa,EAASK,KAAKC,YAAY,G,CAEjD,MAAOX,GACPT,QAAQC,IAAIQ,E,EAWNY,CAAmB/B,EAAKG,EAAKE,E,CACnC,MAAOc,GACPT,QAAQC,IAAIQ,E,EAUhB3B,ICvDAA,IACAkB,QAAQC,IAAInB","sources":["src/partials/weather/fetchWeatherData.js","src/partials/weather/weather.js"],"sourcesContent":["import axios from 'axios';\nexport { fetchWeatherData };\n\nasync function getCurrentWeather(lat, lon, api_key) {\n  const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${api_key}&units=metric`;\n  try {\n    const response = await axios.get(url);\n    const data = response.data;\n    console.log(`Location: ${data.name}, ${data.sys.country}`);\n    console.log(`Weather now: ${data.weather[0].description}`);\n    console.log(`Temperature: ${data.main.temp}°C`);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getWeatherForecast(lat, lon, api_key) {\n  const url = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${api_key}&units=metric`;\n  try {\n    const response = await axios.get(url);\n    const data = response.data;\n    console.log(\n      `5-day weather forecast for the location: ${data.city.name}, ${data.city.country}`\n    );\n    const forecastList = data.list;\n    forecastList.forEach(forecast => {\n      const date = new Date(forecast.dt * 1000);\n      console.log(`Date: ${date.toDateString()}`);\n      console.log(`Weather: ${forecast.weather[0].description}`);\n      console.log(`Temperature: ${forecast.main.temp}°C`);\n      console.log(`Wind: ${forecast.wind.speed} m/s`);\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function fetchWeatherData() {\n  try {\n    const position = await getPosition();\n    const lat = position.coords.latitude;\n    const lon = position.coords.longitude;\n    const api_key = 'ba95449c69063d2989b1d45f265b0f98';\n    await getCurrentWeather(lat, lon, api_key);\n    await getWeatherForecast(lat, lon, api_key);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction getPosition() {\n  return new Promise((resolve, reject) => {\n    navigator.geolocation.getCurrentPosition(resolve, reject);\n  });\n}\n\nfetchWeatherData();\n","import { fetchWeatherData } from './fetchWeatherData';\nfetchWeatherData();\nconsole.log(fetchWeatherData);\n"],"names":["$2shzp","parcelRequire","async","$b3bfba72f4b2f08f$export$ef28063cb779bdf6","position","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","lat","coords","latitude","lon","longitude","api_key","url","data","default","get","console","log","name","sys","country","weather","description","main","temp","error","$b3bfba72f4b2f08f$var$getCurrentWeather","city","list","forEach","forecast","date","Date","dt","toDateString","wind","speed","$b3bfba72f4b2f08f$var$getWeatherForecast"],"version":3,"file":"index.f0ac7722.js.map"}