{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAkDAC,eAAeC,EAAmBC,EAAKC,EAAKC,GAC1C,MAAMC,EAAM,wDAAwDH,SAAWC,WAAaC,iBAC5F,IACE,MACME,SADiBR,EAAAS,QAAMC,IAAIH,IACXC,KAKDA,EAAKG,KACbC,SAAQC,IACN,IAAIC,KAAmB,IAAdD,EAASE,GAAK,IAErBC,SAASC,cAAc,gBAC/BC,iBAAiB,SAAS,IAgDvC,SAAwBC,QACLC,IAAbD,IACFA,EAAW,QAEb,MAAMZ,EAAM,qCAAqCY,IACjDE,OAAOC,KAAKf,EAAK,SACnB,CAtD6CgB,CAAef,EAAKgB,KAAKC,OACpE,CAAE,MAAOC,GACPC,QAAQC,IAAIF,EACd,CACF,CAE8BxB,WAC5B,IACE,MAAM2B,QAuBD,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,UAAUC,YAAYC,oBACpBN,GAAYE,EAAQF,KACpBH,IAEEK,EAAQ,KAAI,GACd,IAEDK,MAAKP,GACFA,GAGK,CAAEQ,OAAQ,CAAEC,SAAU,QAASC,UAAW,YAlCnD,IAAKV,EAEH,OAGF,MAAMzB,EAAMyB,EAASQ,OAAOC,SACtBjC,EAAMwB,EAASQ,OAAOE,UACtBjC,EAAU,mCAEVa,QA5CVjB,eAA2BE,EAAKC,GAC9B,MAAME,EAAM,mDAAmDH,SAAWC,kBAE1E,IAGE,aAFuBL,EAAAS,QAAMC,IAAIH,IACXC,KACVgC,QAAQhB,IACtB,CAAE,MAAOE,GACPC,QAAQC,IAAIF,EACd,CACF,CAkC2Be,CAAYrC,EAAKC,GAErBW,SAASC,cAAc,aAC/ByB,UAAYvB,QAnF3BjB,eAAiCE,EAAKC,EAAKC,GACzC,MAAMC,EAAM,uDAAuDH,SAAWC,WAAaC,iBAC3F,IACE,MACME,SADiBR,EAAAS,QAAMC,IAAIH,IACXC,KAGhBmC,EAAO,IAAI7B,KACX8B,EAAU,CACdC,IAAK,UACLC,MAAO,OACPC,KAAM,WAEFC,EAAgBL,EAAKM,mBAAmB,QAASL,GACjDM,EAAUP,EAAKQ,eAAe,QAAS,CAAED,QAAS,SAElDE,EAAYpC,SAASC,cAAc,YACnCoC,EAAoBrC,SAASC,cAAc,sBAC3CqC,EAAYtC,SAASC,cAAc,aACnCsC,EAAgBvC,SAASC,cAAc,iBACvCuC,EAASxC,SAASC,cAAc,iBAEtCmC,EAAUV,UAAY,GAAGe,KAAKC,MAAMlD,EAAKmD,KAAKC,SAC9CP,EAAkBX,UAChBlC,EAAKqD,QAAQ,GAAGC,YAAYC,OAAO,GAAGC,cACtCxD,EAAKqD,QAAQ,GAAGC,YAAYG,MAAM,GACpCX,EAAUZ,UAAYQ,EACtBK,EAAcb,UAAYM,EAE1B,MAAMkB,EAAU,mCAAmC1D,EAAKqD,QAAQ,GAAGM,WACnEX,EAAOY,aAAa,MAAOF,EAC7B,CAAE,MAAOxC,GACPC,QAAQC,IAAIF,EACd,CACF,CAmDU2C,CAAkBjE,EAAKC,EAAKC,SAC5BH,EAAmBC,EAAKC,EAAKC,EACrC,CAAE,MAAOoB,GACPC,QAAQC,IAAIF,EACd,GC1FF","sources":["src/js/weather/weatherService.js","src/js/weather/weather.js"],"sourcesContent":["import axios from 'axios';\n\nasync function getCurrentWeather(lat, lon, api_key) {\n  const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${api_key}&units=metric`;\n  try {\n    const response = await axios.get(url);\n    const data = response.data;\n    // console.log(data);\n\n    const date = new Date();\n    const options = {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric',\n    };\n    const formattedDate = date.toLocaleDateString('en-GB', options);\n    const weekday = date.toLocaleString('en-US', { weekday: 'long' });\n\n    const degreesEl = document.querySelector('.degrees');\n    const whatsTheWeatherEl = document.querySelector('.whats-the-weather');\n    const weekDayEl = document.querySelector('.week-day');\n    const weatherDateEl = document.querySelector('.weather-date');\n    const iconEl = document.querySelector('.weather-icon');\n\n    degreesEl.innerHTML = `${Math.round(data.main.temp)}Â°`;\n    whatsTheWeatherEl.innerHTML =\n      data.weather[0].description.charAt(0).toUpperCase() +\n      data.weather[0].description.slice(1);\n    weekDayEl.innerHTML = weekday;\n    weatherDateEl.innerHTML = formattedDate;\n\n    const iconUrl = `http://openweathermap.org/img/w/${data.weather[0].icon}.png`;\n    iconEl.setAttribute('src', iconUrl);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getCityName(lat, lon) {\n  const url = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=jsonv2`;\n\n  try {\n    const response = await axios.get(url);\n    const data = response.data;\n    return data.address.city;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getWeatherForecast(lat, lon, api_key) {\n  const url = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${api_key}&units=metric`;\n  try {\n    const response = await axios.get(url);\n    const data = response.data;\n    // console.log(data);\n    // console.log(\n    //   `5-day weather forecast for the location: ${data.city.name}, ${data.city.country}`\n    // );\n    const forecastList = data.list;\n    forecastList.forEach(forecast => {\n      const date = new Date(forecast.dt * 1000);\n    });\n    const buttonEl = document.querySelector('.show-on-map');\n    buttonEl.addEventListener('click', () => openGoogleMaps(data.city.name));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const weatherService = async () => {\n  try {\n    const position = await getPosition();\n    if (!position) {\n      // console.log('Could not get geolocation');\n      return;\n    }\n\n    const lat = position.coords.latitude;\n    const lon = position.coords.longitude;\n    const api_key = 'ba95449c69063d2989b1d45f265b0f98';\n\n    const cityName = await getCityName(lat, lon);\n    // console.log(`Location: ${cityName}`);\n    const locationEl = document.querySelector('.location');\n    locationEl.innerHTML = cityName;\n\n    await getCurrentWeather(lat, lon, api_key);\n    await getWeatherForecast(lat, lon, api_key);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nfunction getPosition() {\n  return new Promise((resolve, reject) => {\n    navigator.geolocation.getCurrentPosition(\n      position => resolve(position),\n      error => {\n        // console.log(error);\n        resolve(null);\n      }\n    );\n  }).then(position => {\n    if (position) {\n      return position;\n    } else {\n      return { coords: { latitude: 50.4501, longitude: 30.5234 } };\n    }\n  });\n}\n\nfunction openGoogleMaps(cityName) {\n  if (cityName === undefined) {\n    cityName = 'Kyiv';\n  }\n  const url = `https://www.google.com/maps/place/${cityName}`;\n  window.open(url, '_blank');\n}\n","import { weatherService } from './weatherService';\nweatherService();\n"],"names":["$2shzp","parcelRequire","async","$44464759e33aad98$var$getWeatherForecast","lat","lon","api_key","url","data","default","get","list","forEach","forecast","Date","dt","document","querySelector","addEventListener","cityName","undefined","window","open","$44464759e33aad98$var$openGoogleMaps","city","name","error","console","log","position","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","then","coords","latitude","longitude","address","$44464759e33aad98$var$getCityName","innerHTML","date","options","day","month","year","formattedDate","toLocaleDateString","weekday","toLocaleString","degreesEl","whatsTheWeatherEl","weekDayEl","weatherDateEl","iconEl","Math","round","main","temp","weather","description","charAt","toUpperCase","slice","iconUrl","icon","setAttribute","$44464759e33aad98$var$getCurrentWeather"],"version":3,"file":"favourite.4d309e78.js.map"}