{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAoE8BC,WAC5B,IACE,MAAMC,QAuBD,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,UAAUC,YAAYC,oBACpBN,GAAYE,EAAQF,KACpBO,IACEC,QAAQC,IAAIF,GACZL,EAAQ,KAAK,GAEhB,IA7BD,IAAKF,EAEH,YADAQ,QAAQC,IAAI,6BAId,MAAMC,EAAMV,EAASW,OAAOC,SACtBC,EAAMb,EAASW,OAAOG,UACtBC,EAAU,mCAEVC,QA1CVjB,eAA2BW,EAAKG,GAC9B,MAAMI,EAAM,mDAAmDP,SAAWG,kBAE1E,IAGE,aAFuBhB,EAAAqB,QAAMC,IAAIF,IACXG,KACVC,QAAQC,I,CACpB,MAAOf,GACPC,QAAQC,IAAIF,E,EAkCWgB,CAAYb,EAAKG,GACxCL,QAAQC,IAAI,aAAaO,KACNQ,SAASC,cAAc,aAC/BC,UAAYV,QAjF3BjB,eAAiCW,EAAKG,EAAKE,GACzC,MAAME,EAAM,uDAAuDP,SAAWG,WAAaE,iBAC3F,IACE,MACMK,SADiBvB,EAAAqB,QAAMC,IAAIF,IACXG,KACtBZ,QAAQC,IAAIW,GAEZ,MAAMO,EAAO,IAAIC,KACXC,EAAU,CACdC,IAAK,UACLC,MAAO,OACPC,KAAM,WAEFC,EAAgBN,EAAKO,mBAAmB,QAASL,GACjDM,EAAUR,EAAKS,eAAe,QAAS,CAAED,QAAS,SAElDE,EAAYb,SAASC,cAAc,YACnCa,EAAoBd,SAASC,cAAc,sBAC3Cc,EAAYf,SAASC,cAAc,aACnCe,EAAgBhB,SAASC,cAAc,iBACvCgB,EAASjB,SAASC,cAAc,iBAEtCY,EAAUX,UAAY,GAAGgB,KAAKC,MAAMvB,EAAKwB,KAAKC,SAC9CP,EAAkBZ,UAChBN,EAAK0B,QAAQ,GAAGC,YAAYC,OAAO,GAAGC,cACtC7B,EAAK0B,QAAQ,GAAGC,YAAYG,MAAM,GACpCX,EAAUb,UAAYS,EACtBK,EAAcd,UAAYO,EAE1B,MAAMkB,EAAU,mCAAmC/B,EAAK0B,QAAQ,GAAGM,WACnEX,EAAOY,aAAa,MAAOF,E,CAC3B,MAAO5C,GACPC,QAAQC,IAAIF,E,EAmDN+C,CAAkB5C,EAAKG,EAAKE,SAnCtChB,eAAkCW,EAAKG,EAAKE,GAC1C,MAAME,EAAM,wDAAwDP,SAAWG,WAAaE,iBAC5F,IACE,MACMK,SADiBvB,EAAAqB,QAAMC,IAAIF,IACXG,KACtBZ,QAAQC,IAAIW,GACZZ,QAAQC,IACN,4CAA4CW,EAAKE,KAAKiC,SAASnC,EAAKE,KAAKkC,WAEtDpC,EAAKqC,KACbC,SAAQC,IACN,IAAI/B,KAAmB,IAAd+B,EAASC,GAAU,G,CAE3C,MAAOrD,GACPC,QAAQC,IAAIF,E,EAsBNsD,CAAmBnD,EAAKG,EAAKE,E,CACnC,MAAOR,GACPC,QAAQC,IAAIF,E,GCvFhB","sources":["src/js/weather/weatherService.js","src/js/weather/weather.js"],"sourcesContent":["import axios from 'axios';\n\nasync function getCurrentWeather(lat, lon, api_key) {\n  const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${api_key}&units=metric`;\n  try {\n    const response = await axios.get(url);\n    const data = response.data;\n    console.log(data);\n\n    const date = new Date();\n    const options = {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric',\n    };\n    const formattedDate = date.toLocaleDateString('en-GB', options);\n    const weekday = date.toLocaleString('en-US', { weekday: 'long' });\n\n    const degreesEl = document.querySelector('.degrees');\n    const whatsTheWeatherEl = document.querySelector('.whats-the-weather');\n    const weekDayEl = document.querySelector('.week-day');\n    const weatherDateEl = document.querySelector('.weather-date');\n    const iconEl = document.querySelector('.weather-icon');\n\n    degreesEl.innerHTML = `${Math.round(data.main.temp)}Â°`;\n    whatsTheWeatherEl.innerHTML =\n      data.weather[0].description.charAt(0).toUpperCase() +\n      data.weather[0].description.slice(1);\n    weekDayEl.innerHTML = weekday;\n    weatherDateEl.innerHTML = formattedDate;\n\n    const iconUrl = `http://openweathermap.org/img/w/${data.weather[0].icon}.png`;\n    iconEl.setAttribute('src', iconUrl);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getCityName(lat, lon) {\n  const url = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=jsonv2`;\n\n  try {\n    const response = await axios.get(url);\n    const data = response.data;\n    return data.address.city;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getWeatherForecast(lat, lon, api_key) {\n  const url = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${api_key}&units=metric`;\n  try {\n    const response = await axios.get(url);\n    const data = response.data;\n    console.log(data);\n    console.log(\n      `5-day weather forecast for the location: ${data.city.name}, ${data.city.country}`\n    );\n    const forecastList = data.list;\n    forecastList.forEach(forecast => {\n      const date = new Date(forecast.dt * 1000);\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const weatherService = async () => {\n  try {\n    const position = await getPosition();\n    if (!position) {\n      console.log('Could not get geolocation');\n      return;\n    }\n\n    const lat = position.coords.latitude;\n    const lon = position.coords.longitude;\n    const api_key = 'ba95449c69063d2989b1d45f265b0f98';\n\n    const cityName = await getCityName(lat, lon);\n    console.log(`Location: ${cityName}`);\n    const locationEl = document.querySelector('.location');\n    locationEl.innerHTML = cityName;\n\n    await getCurrentWeather(lat, lon, api_key);\n    await getWeatherForecast(lat, lon, api_key);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nfunction getPosition() {\n  return new Promise((resolve, reject) => {\n    navigator.geolocation.getCurrentPosition(\n      position => resolve(position),\n      error => {\n        console.log(error);\n        resolve(null);\n      }\n    );\n  });\n}\n","import { weatherService } from './weatherService';\nweatherService();\n"],"names":["$2shzp","parcelRequire","async","position","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","error","console","log","lat","coords","latitude","lon","longitude","api_key","cityName","url","default","get","data","address","city","$44464759e33aad98$var$getCityName","document","querySelector","innerHTML","date","Date","options","day","month","year","formattedDate","toLocaleDateString","weekday","toLocaleString","degreesEl","whatsTheWeatherEl","weekDayEl","weatherDateEl","iconEl","Math","round","main","temp","weather","description","charAt","toUpperCase","slice","iconUrl","icon","setAttribute","$44464759e33aad98$var$getCurrentWeather","name","country","list","forEach","forecast","dt","$44464759e33aad98$var$getWeatherForecast"],"version":3,"file":"index.9bdea99c.js.map"}