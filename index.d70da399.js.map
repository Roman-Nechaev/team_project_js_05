{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,UA2DAC,iBACE,IACE,MAAMC,QAYD,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,UAAUC,YAAYC,oBACpBN,GAAYE,EAAQF,KACpBO,IACEC,QAAQC,IAAIF,GAKZL,EAHwB,CACtBQ,OAAQ,CAAEC,SAAU,QAASC,WAAW,QAElB,GAE3B,IAtBKC,EAAMb,EAASU,OAAOC,SACtBG,EAAMd,EAASU,OAAOE,UACtBG,EAAU,yCA7DpBhB,eAAiCc,EAAKC,EAAKC,GACzC,MAAMC,EAAM,uDAAuDH,SAAWC,WAAaC,iBAC3F,IACE,MACME,SADiBpB,EAAAqB,QAAMC,IAAIH,IACXC,KACtBT,QAAQC,IAAI,aAAaQ,EAAKG,SAASH,EAAKI,IAAIC,WAChDd,QAAQC,IAAI,gBAAgBQ,EAAKM,QAAQ,GAAGC,eAC5ChB,QAAQC,IAAI,gBAAgBQ,EAAKQ,KAAKC,UAErC,MAAKC,EAAO,IAAIC,KACXC,EAAU,CAEdC,KAAM,UACNC,MAAO,OACPC,IAAK,WAEDC,EAAgBN,EAAKO,mBAAmB,QAASL,GACjDM,EAAUR,EAAKS,eAAe,QAAS,CAAED,QAAS,SAElDE,EAAYC,SAASC,cAAc,YACnCC,EAAoBF,SAASC,cAAc,sBAC3CE,EAAaH,SAASC,cAAc,aACpCG,EAAYJ,SAASC,cAAc,aACnCI,EAAgBL,SAASC,cAAc,iBAE7CF,EAAUO,UAAY,GAAGC,KAAKC,MAAM7B,EAAKQ,KAAKC,SAC7Cc,EAAiBI,UAAY3B,EAAKM,QAAQ,GAAGC,YAC9CiB,EAAWG,UAAY3B,EAAKG,KAC5BsB,EAAUE,UAAYT,EACtBQ,EAAcC,UAAYX,C,CAC1B,MAAO1B,GACPC,QAAQC,IAAIF,E,EA+BNwC,CAAkBlC,EAAKC,EAAKC,SA3BtChB,eAAkCc,EAAKC,EAAKC,GAC1C,MAAMC,EAAM,wDAAwDH,SAAWC,WAAaC,iBAC5F,IACE,MACME,SADiBpB,EAAAqB,QAAMC,IAAIH,IACXC,KACtBT,QAAQC,IACN,4CAA4CQ,EAAK+B,KAAK5B,SAASH,EAAK+B,KAAK1B,WAEtDL,EAAKgC,KACbC,SAAQC,IACN,IAAIvB,KAAmB,IAAduB,EAASC,GAAU,G,CAM3C,MAAO7C,GACPC,QAAQC,IAAIF,E,EAWN8C,CAAmBxC,EAAKC,EAAKC,E,CACnC,MAAOR,GACPC,QAAQC,IAAIF,E,ECnEhB","sources":["src/partials/weather/fetchWeatherData.js","src/partials/weather/weather.js"],"sourcesContent":["import axios from 'axios';\nexport { fetchWeatherData };\n\nasync function getCurrentWeather(lat, lon, api_key) {\n  const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${api_key}&units=metric`;\n  try {\n    const response = await axios.get(url);\n    const data = response.data;\n    console.log(`Location: ${data.name}, ${data.sys.country}`);\n    console.log(`Weather now: ${data.weather[0].description}`);\n    console.log(`Temperature: ${data.main.temp}°C`);\n\n    const date = new Date();\n    const options = {\n      // weekday: 'short',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    };\n    const formattedDate = date.toLocaleDateString('en-US', options);\n    const weekday = date.toLocaleString('en-US', { weekday: 'long' });\n\n    const degreesEl = document.querySelector('.degrees');\n    const whatsTheWeatherEl = document.querySelector('.whats-the-weather');\n    const locationEl = document.querySelector('.location');\n    const weekDayEl = document.querySelector('.week-day');\n    const weatherDateEl = document.querySelector('.weather-date');\n\n    degreesEl.innerHTML = `${Math.round(data.main.temp)}°`;\n    whatsTheWeatherEl.innerHTML = data.weather[0].description;\n    locationEl.innerHTML = data.name;\n    weekDayEl.innerHTML = weekday;\n    weatherDateEl.innerHTML = formattedDate;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getWeatherForecast(lat, lon, api_key) {\n  const url = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${api_key}&units=metric`;\n  try {\n    const response = await axios.get(url);\n    const data = response.data;\n    console.log(\n      `5-day weather forecast for the location: ${data.city.name}, ${data.city.country}`\n    );\n    const forecastList = data.list;\n    forecastList.forEach(forecast => {\n      const date = new Date(forecast.dt * 1000);\n      // console.log(`Date: ${date.toDateString()}`);\n      // console.log(`Weather: ${forecast.weather[0].description}`);\n      // console.log(`Temperature: ${forecast.main.temp}°C`);\n      // console.log(`Wind: ${forecast.wind.speed} m/s`);\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function fetchWeatherData() {\n  try {\n    const position = await getPosition();\n    const lat = position.coords.latitude;\n    const lon = position.coords.longitude;\n    const api_key = 'ba95449c69063d2989b1d45f265b0f98';\n    await getCurrentWeather(lat, lon, api_key);\n    await getWeatherForecast(lat, lon, api_key);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction getPosition() {\n  return new Promise((resolve, reject) => {\n    navigator.geolocation.getCurrentPosition(\n      position => resolve(position),\n      error => {\n        console.log(error);\n\n        const defaultPosition = {\n          coords: { latitude: 51.5072, longitude: -0.1276 },\n        };\n        resolve(defaultPosition);\n      }\n    );\n  });\n}\n","import { fetchWeatherData } from './fetchWeatherData';\nfetchWeatherData();\n"],"names":["$2shzp","parcelRequire","async","position","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","error","console","log","coords","latitude","longitude","lat","lon","api_key","url","data","default","get","name","sys","country","weather","description","main","temp","date","Date","options","year","month","day","formattedDate","toLocaleDateString","weekday","toLocaleString","degreesEl","document","querySelector","whatsTheWeatherEl","locationEl","weekDayEl","weatherDateEl","innerHTML","Math","round","$b3bfba72f4b2f08f$var$getCurrentWeather","city","list","forEach","forecast","dt","$b3bfba72f4b2f08f$var$getWeatherForecast"],"version":3,"file":"index.d70da399.js.map"}