{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAkDAC,eAAeC,EAAmBC,EAAKC,EAAKC,GAC1C,MAAMC,EAAM,wDAAwDH,SAAWC,WAAaC,iBAC5F,IACE,MACME,SADiBR,EAAAS,QAAMC,IAAIH,IACXC,KACtBG,QAAQC,IAAIJ,GACZG,QAAQC,IACN,4CAA4CJ,EAAKK,KAAKC,SAASN,EAAKK,KAAKE,WAEtDP,EAAKQ,KACbC,SAAQC,IACN,IAAIC,KAAmB,IAAdD,EAASE,GAAU,IAE1BC,SAASC,cAAc,gBAC/BC,iBAAiB,SAAS,IA0CvC,SAAwBC,GACtB,MAAMjB,EAAM,qCAAqCiB,IACjDC,OAAOC,KAAKnB,EAAK,S,CA5C0BoB,CAAenB,EAAKK,KAAKC,O,CAClE,MAAOc,GACPjB,QAAQC,IAAIgB,E,EAIc1B,WAC5B,IACE,MAAM2B,QAuBD,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,UAAUC,YAAYC,oBACpBN,GAAYE,EAAQF,KACpBD,IACEjB,QAAQC,IAAIgB,GACZG,EAAQ,KAAK,GAEhB,IA7BD,IAAKF,EAEH,YADAlB,QAAQC,IAAI,6BAId,MAAMR,EAAMyB,EAASO,OAAOC,SACtBhC,EAAMwB,EAASO,OAAOE,UACtBhC,EAAU,mCAEVkB,QA5CVtB,eAA2BE,EAAKC,GAC9B,MAAME,EAAM,mDAAmDH,SAAWC,kBAE1E,IAGE,aAFuBL,EAAAS,QAAMC,IAAIH,IACXC,KACV+B,QAAQ1B,I,CACpB,MAAOe,GACPjB,QAAQC,IAAIgB,E,EAoCWY,CAAYpC,EAAKC,GACxCM,QAAQC,IAAI,aAAaY,KACNH,SAASC,cAAc,aAC/BmB,UAAYjB,QAnF3BtB,eAAiCE,EAAKC,EAAKC,GACzC,MAAMC,EAAM,uDAAuDH,SAAWC,WAAaC,iBAC3F,IACE,MACME,SADiBR,EAAAS,QAAMC,IAAIH,IACXC,KACtBG,QAAQC,IAAIJ,GAEZ,MAAMkC,EAAO,IAAIvB,KACXwB,EAAU,CACdC,IAAK,UACLC,MAAO,OACPC,KAAM,WAEFC,EAAgBL,EAAKM,mBAAmB,QAASL,GACjDM,EAAUP,EAAKQ,eAAe,QAAS,CAAED,QAAS,SAElDE,EAAY9B,SAASC,cAAc,YACnC8B,EAAoB/B,SAASC,cAAc,sBAC3C+B,EAAYhC,SAASC,cAAc,aACnCgC,EAAgBjC,SAASC,cAAc,iBACvCiC,EAASlC,SAASC,cAAc,iBAEtC6B,EAAUV,UAAY,GAAGe,KAAKC,MAAMjD,EAAKkD,KAAKC,SAC9CP,EAAkBX,UAChBjC,EAAKoD,QAAQ,GAAGC,YAAYC,OAAO,GAAGC,cACtCvD,EAAKoD,QAAQ,GAAGC,YAAYG,MAAM,GACpCX,EAAUZ,UAAYQ,EACtBK,EAAcb,UAAYM,EAE1B,MAAMkB,EAAU,mCAAmCzD,EAAKoD,QAAQ,GAAGM,WACnEX,EAAOY,aAAa,MAAOF,E,CAC3B,MAAOrC,GACPjB,QAAQC,IAAIgB,E,EAqDNwC,CAAkBhE,EAAKC,EAAKC,SAC5BH,EAAmBC,EAAKC,EAAKC,E,CACnC,MAAOsB,GACPjB,QAAQC,IAAIgB,E,GCzFhB","sources":["src/js/weather/weatherService.js","src/js/weather/weather.js"],"sourcesContent":["import axios from 'axios';\n\nasync function getCurrentWeather(lat, lon, api_key) {\n  const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${api_key}&units=metric`;\n  try {\n    const response = await axios.get(url);\n    const data = response.data;\n    console.log(data);\n\n    const date = new Date();\n    const options = {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric',\n    };\n    const formattedDate = date.toLocaleDateString('en-GB', options);\n    const weekday = date.toLocaleString('en-US', { weekday: 'long' });\n\n    const degreesEl = document.querySelector('.degrees');\n    const whatsTheWeatherEl = document.querySelector('.whats-the-weather');\n    const weekDayEl = document.querySelector('.week-day');\n    const weatherDateEl = document.querySelector('.weather-date');\n    const iconEl = document.querySelector('.weather-icon');\n\n    degreesEl.innerHTML = `${Math.round(data.main.temp)}Â°`;\n    whatsTheWeatherEl.innerHTML =\n      data.weather[0].description.charAt(0).toUpperCase() +\n      data.weather[0].description.slice(1);\n    weekDayEl.innerHTML = weekday;\n    weatherDateEl.innerHTML = formattedDate;\n\n    const iconUrl = `http://openweathermap.org/img/w/${data.weather[0].icon}.png`;\n    iconEl.setAttribute('src', iconUrl);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getCityName(lat, lon) {\n  const url = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=jsonv2`;\n\n  try {\n    const response = await axios.get(url);\n    const data = response.data;\n    return data.address.city;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getWeatherForecast(lat, lon, api_key) {\n  const url = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${api_key}&units=metric`;\n  try {\n    const response = await axios.get(url);\n    const data = response.data;\n    console.log(data);\n    console.log(\n      `5-day weather forecast for the location: ${data.city.name}, ${data.city.country}`\n    );\n    const forecastList = data.list;\n    forecastList.forEach(forecast => {\n      const date = new Date(forecast.dt * 1000);\n    });\n    const buttonEl = document.querySelector('.show-on-map');\n    buttonEl.addEventListener('click', () => openGoogleMaps(data.city.name));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const weatherService = async () => {\n  try {\n    const position = await getPosition();\n    if (!position) {\n      console.log('Could not get geolocation');\n      return;\n    }\n\n    const lat = position.coords.latitude;\n    const lon = position.coords.longitude;\n    const api_key = 'ba95449c69063d2989b1d45f265b0f98';\n\n    const cityName = await getCityName(lat, lon);\n    console.log(`Location: ${cityName}`);\n    const locationEl = document.querySelector('.location');\n    locationEl.innerHTML = cityName;\n\n    await getCurrentWeather(lat, lon, api_key);\n    await getWeatherForecast(lat, lon, api_key);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nfunction getPosition() {\n  return new Promise((resolve, reject) => {\n    navigator.geolocation.getCurrentPosition(\n      position => resolve(position),\n      error => {\n        console.log(error);\n        resolve(null);\n      }\n    );\n  });\n}\n\nfunction openGoogleMaps(cityName) {\n  const url = `https://www.google.com/maps/place/${cityName}`;\n  window.open(url, '_blank');\n}\n","import { weatherService } from './weatherService';\nweatherService();\n"],"names":["$2shzp","parcelRequire","async","$44464759e33aad98$var$getWeatherForecast","lat","lon","api_key","url","data","default","get","console","log","city","name","country","list","forEach","forecast","Date","dt","document","querySelector","addEventListener","cityName","window","open","$44464759e33aad98$var$openGoogleMaps","error","position","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","address","$44464759e33aad98$var$getCityName","innerHTML","date","options","day","month","year","formattedDate","toLocaleDateString","weekday","toLocaleString","degreesEl","whatsTheWeatherEl","weekDayEl","weatherDateEl","iconEl","Math","round","main","temp","weather","description","charAt","toUpperCase","slice","iconUrl","icon","setAttribute","$44464759e33aad98$var$getCurrentWeather"],"version":3,"file":"index.77fea13a.js.map"}