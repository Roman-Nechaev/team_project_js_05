{"mappings":"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","sources":["src/js/weather/weatherService.js","src/js/weather/weather.js"],"sourcesContent":["import axios from 'axios';\n\nasync function getCurrentWeather(lat, lon, api_key) {\n  const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${api_key}&units=metric`;\n  try {\n    const response = await axios.get(url);\n    const data = response.data;\n    console.log(data);\n\n    const date = new Date();\n    const options = {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric',\n    };\n    const formattedDate = date.toLocaleDateString('en-GB', options);\n    const weekday = date.toLocaleString('en-US', { weekday: 'long' });\n\n    const degreesEl = document.querySelector('.degrees');\n    const whatsTheWeatherEl = document.querySelector('.whats-the-weather');\n    const weekDayEl = document.querySelector('.week-day');\n    const weatherDateEl = document.querySelector('.weather-date');\n    const iconEl = document.querySelector('.weather-icon');\n\n    degreesEl.innerHTML = `${Math.round(data.main.temp)}Â°`;\n    whatsTheWeatherEl.innerHTML =\n      data.weather[0].description.charAt(0).toUpperCase() +\n      data.weather[0].description.slice(1);\n    weekDayEl.innerHTML = weekday;\n    weatherDateEl.innerHTML = formattedDate;\n\n    const iconUrl = `http://openweathermap.org/img/w/${data.weather[0].icon}.png`;\n    iconEl.setAttribute('src', iconUrl);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getCityName(lat, lon) {\n  const url = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=jsonv2`;\n\n  try {\n    const response = await axios.get(url);\n    const data = response.data;\n    return data.address.city;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getWeatherForecast(lat, lon, api_key) {\n  const url = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${api_key}&units=metric`;\n  try {\n    const response = await axios.get(url);\n    const data = response.data;\n    console.log(data);\n    console.log(\n      `5-day weather forecast for the location: ${data.city.name}, ${data.city.country}`\n    );\n    const forecastList = data.list;\n    forecastList.forEach(forecast => {\n      const date = new Date(forecast.dt * 1000);\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const weatherService = async () => {\n  try {\n    const position = await getPosition();\n    if (!position) {\n      console.log('Could not get geolocation');\n      return;\n    }\n\n    const lat = position.coords.latitude;\n    const lon = position.coords.longitude;\n    const api_key = 'ba95449c69063d2989b1d45f265b0f98';\n\n    const cityName = await getCityName(lat, lon);\n    console.log(`Location: ${cityName}`);\n    const locationEl = document.querySelector('.location');\n    locationEl.innerHTML = cityName;\n\n    await getCurrentWeather(lat, lon, api_key);\n    await getWeatherForecast(lat, lon, api_key);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nfunction getPosition() {\n  return new Promise((resolve, reject) => {\n    navigator.geolocation.getCurrentPosition(\n      position => resolve(position),\n      error => {\n        console.log(error);\n        resolve(null);\n      }\n    );\n  });\n}\n","import { weatherService } from './weatherService';\nweatherService();\n"],"names":["$bpxeT","parcelRequire","$e9ba9e7dbb524f20$var$getCurrentWeather","lat","lon","api_key","$e9ba9e7dbb524f20$var$_getCurrentWeather","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","url","response","data","date","options","formattedDate","weekday","degreesEl","whatsTheWeatherEl","weekDayEl","weatherDateEl","iconEl","iconUrl","concat","$dIxxU","default","get","_ctx","sent","console","log","Date","day","month","year","toLocaleDateString","toLocaleString","document","querySelector","innerHTML","Math","round","main","temp","weather","description","charAt","toUpperCase","slice","icon","setAttribute","t0","$e9ba9e7dbb524f20$var$getCityName","$e9ba9e7dbb524f20$var$_getCityName","address","city","$e9ba9e7dbb524f20$var$getWeatherForecast","$e9ba9e7dbb524f20$var$_getWeatherForecast","name","country","list","forEach","forecast","dt","$e9ba9e7dbb524f20$export$8e52e9507eb580f3","position","cityName","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","error","coords","latitude","longitude"],"version":3,"file":"index.65dbc350.js.map"}