{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,S,mCAEeC,EAAkBC,EAAKC,EAAKC,G,OAA5BC,EAAAC,MAAAC,KAAAC,U,UAAAH,I,OAAAA,GAAf,EAAAN,EAAAU,UAAA,SAAiCP,EAAKC,EAAKC,G,IACnCM,EAEEC,EACAC,EAGAC,EACAC,EAKAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EASAC,EAECC,E,iEA9BHb,EAAM,uDAAkEc,OAAXtB,EAAI,SAAoBsB,OAAbrB,EAAI,WAAiBqB,OAARpB,EAAQ,iB,iBAEhF,O,sBAAA,C,EAAMqB,EAAAhB,QAAMiB,IAAIhB,I,cAA3BC,EAAWgB,EAAAC,OACXhB,EAAOD,EAASC,KACtBiB,QAAQC,IAAIlB,GAENC,EAAO,IAAIkB,KACXjB,EAAU,CACdkB,IAAK,UACLC,MAAO,OACPC,KAAM,WAEFnB,EAAgBF,EAAKsB,mBAAmB,QAASrB,GACjDE,EAAUH,EAAKuB,eAAe,QAAS,CAAEpB,QAAS,SAElDC,EAAYoB,SAASC,cAAc,YACnCpB,EAAoBmB,SAASC,cAAc,sBAC3CnB,EAAYkB,SAASC,cAAc,aACnClB,EAAgBiB,SAASC,cAAc,iBACvCjB,EAASgB,SAASC,cAAc,iBAEtCrB,EAAUsB,UAAY,GAA8Bf,OAA3BgB,KAAKC,MAAM7B,EAAK8B,KAAKC,MAAM,KACpDzB,EAAkBqB,UAChB3B,EAAKgC,QAAQ,GAAGC,YAAYC,OAAO,GAAGC,cACtCnC,EAAKgC,QAAQ,GAAGC,YAAYG,MAAM,GACpC7B,EAAUoB,UAAYvB,EACtBI,EAAcmB,UAAYxB,EAEpBO,EAAU,mCAAwDE,OAArBZ,EAAKgC,QAAQ,GAAGK,KAAK,QACxE5B,EAAO6B,aAAa,MAAO5B,G,oBACpBC,EAAAI,EAAAC,OACPC,QAAQC,IAAIP,G,0BAEhB,KAlCejB,MAAAC,KAAAC,U,UAoCA2C,EAAYjD,EAAKC,G,OAAjBiD,EAAA9C,MAAAC,KAAAC,U,UAAA4C,I,OAAAA,GAAf,EAAArD,EAAAU,UAAA,SAA2BP,EAAKC,G,IACxBO,EAGEC,EAGCY,E,iEANHb,EAAM,mDAA8Dc,OAAXtB,EAAI,SAAWsB,OAAJrB,EAAI,kB,iBAG3D,O,sBAAA,C,EAAMsB,EAAAhB,QAAMiB,IAAIhB,I,OAEjC,OAFMC,EAAWgB,EAAAC,OAEjB,C,EADajB,EAASC,KACVyC,QAAQC,M,cACb/B,EAAAI,EAAAC,OACPC,QAAQC,IAAIP,G,0BAEhB,KAVejB,MAAAC,KAAAC,U,UAYA+C,EAAmBrD,EAAKC,EAAKC,G,OAA7BoD,EAAAlD,MAAAC,KAAAC,U,UAAAgD,I,OAAAA,GAAf,EAAAzD,EAAAU,UAAA,SAAkCP,EAAKC,EAAKC,G,IACpCM,EAEEC,EACAC,EAWCW,E,iEAdHb,EAAM,wDAAmEc,OAAXtB,EAAI,SAAoBsB,OAAbrB,EAAI,WAAiBqB,OAARpB,EAAQ,iB,iBAEjF,O,sBAAA,C,EAAMqB,EAAAhB,QAAMiB,IAAIhB,I,cAA3BC,EAAWgB,EAAAC,OACXhB,EAAOD,EAASC,KACtBiB,QAAQC,IAAIlB,GACZiB,QAAQC,IACN,4CAA+DN,OAAnBZ,EAAK0C,KAAKG,KAAK,MAAsBjC,OAAlBZ,EAAK0C,KAAKI,UAEtD9C,EAAK+C,KACbC,SAAQ,SAAAC,GACN,IAAI9B,KAAmB,IAAd8B,EAASC,GACjC,IACiBzB,SAASC,cAAc,gBAC/ByB,iBAAiB,SAAS,W,OA0CvC,SAAwBC,QACLC,IAAbD,IACFA,EAAW,QAEb,IAAMtD,EAAM,qCAA8Cc,OAATwC,GACjDE,OAAOC,KAAKzD,EAAK,SACnB,CAhD6C0D,CAAexD,EAAK0C,KAAKG,K,wBAC3DlC,EAAAI,EAAAC,OACPC,QAAQC,IAAIP,G,0BAEhB,KAlBejB,MAAAC,KAAAC,U,CAoBR,I,EAAM6D,G,GAAiB,EAAAtE,EAAAU,UAAA,W,IAEpB6D,EAMApE,EACAC,EACAC,EAEA4D,EAOCzC,E,iEAjBU,O,sBAAA,C,EAuBZ,IAAIgD,SAAQ,SAACC,EAASC,GAC3BC,UAAUC,YAAYC,oBACpB,SAAAN,G,OAAYE,EAAQF,E,IACpB,SAAA/C,GACEM,QAAQC,IAAIP,GACZiD,EAAQ,KACV,GAEJ,K,OA9BE,OADMF,EAAW3C,EAAAC,SAMX1B,EAAMoE,EAASO,OAAOC,SACtB3E,EAAMmE,EAASO,OAAOE,UACtB3E,EAAU,mCAEC,C,EAAM+C,EAAYjD,EAAKC,MARtC0B,QAAQC,IAAI,6BACZ,C,WAYF,OALMkC,EAAWrC,EAAAC,OACjBC,QAAQC,IAAI,aAAsBN,OAATwC,IACN3B,SAASC,cAAc,aAC/BC,UAAYyB,EAEvB,C,EAAM/D,EAAkBC,EAAKC,EAAKC,I,OAClC,OADAuB,EAAAC,OACA,C,EAAM2B,EAAmBrD,EAAKC,EAAKC,I,cAAnCuB,EAAAC,O,oBACOL,EAAAI,EAAAC,OACPC,QAAQC,IAAIP,G,0BAEhB,I,4CC3FA8C,G","sources":["src/js/weather/weatherService.js","src/js/weather/weather.js"],"sourcesContent":["import axios from 'axios';\n\nasync function getCurrentWeather(lat, lon, api_key) {\n  const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${api_key}&units=metric`;\n  try {\n    const response = await axios.get(url);\n    const data = response.data;\n    console.log(data);\n\n    const date = new Date();\n    const options = {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric',\n    };\n    const formattedDate = date.toLocaleDateString('en-GB', options);\n    const weekday = date.toLocaleString('en-US', { weekday: 'long' });\n\n    const degreesEl = document.querySelector('.degrees');\n    const whatsTheWeatherEl = document.querySelector('.whats-the-weather');\n    const weekDayEl = document.querySelector('.week-day');\n    const weatherDateEl = document.querySelector('.weather-date');\n    const iconEl = document.querySelector('.weather-icon');\n\n    degreesEl.innerHTML = `${Math.round(data.main.temp)}Â°`;\n    whatsTheWeatherEl.innerHTML =\n      data.weather[0].description.charAt(0).toUpperCase() +\n      data.weather[0].description.slice(1);\n    weekDayEl.innerHTML = weekday;\n    weatherDateEl.innerHTML = formattedDate;\n\n    const iconUrl = `http://openweathermap.org/img/w/${data.weather[0].icon}.png`;\n    iconEl.setAttribute('src', iconUrl);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getCityName(lat, lon) {\n  const url = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=jsonv2`;\n\n  try {\n    const response = await axios.get(url);\n    const data = response.data;\n    return data.address.city;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getWeatherForecast(lat, lon, api_key) {\n  const url = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${api_key}&units=metric`;\n  try {\n    const response = await axios.get(url);\n    const data = response.data;\n    console.log(data);\n    console.log(\n      `5-day weather forecast for the location: ${data.city.name}, ${data.city.country}`\n    );\n    const forecastList = data.list;\n    forecastList.forEach(forecast => {\n      const date = new Date(forecast.dt * 1000);\n    });\n    const buttonEl = document.querySelector('.show-on-map');\n    buttonEl.addEventListener('click', () => openGoogleMaps(data.city.name));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const weatherService = async () => {\n  try {\n    const position = await getPosition();\n    if (!position) {\n      console.log('Could not get geolocation');\n      return;\n    }\n\n    const lat = position.coords.latitude;\n    const lon = position.coords.longitude;\n    const api_key = 'ba95449c69063d2989b1d45f265b0f98';\n\n    const cityName = await getCityName(lat, lon);\n    console.log(`Location: ${cityName}`);\n    const locationEl = document.querySelector('.location');\n    locationEl.innerHTML = cityName;\n\n    await getCurrentWeather(lat, lon, api_key);\n    await getWeatherForecast(lat, lon, api_key);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nfunction getPosition() {\n  return new Promise((resolve, reject) => {\n    navigator.geolocation.getCurrentPosition(\n      position => resolve(position),\n      error => {\n        console.log(error);\n        resolve(null);\n      }\n    );\n  });\n}\n\nfunction openGoogleMaps(cityName) {\n  if (cityName === undefined) {\n    cityName = 'Kyiv';\n  }\n  const url = `https://www.google.com/maps/place/${cityName}`;\n  window.open(url, '_blank');\n}\n","import { weatherService } from './weatherService';\nweatherService();\n"],"names":["$7pbsT","parcelRequire","$e9ba9e7dbb524f20$var$getCurrentWeather","lat","lon","api_key","$e9ba9e7dbb524f20$var$_getCurrentWeather","apply","this","arguments","default","url","response","data","date","options","formattedDate","weekday","degreesEl","whatsTheWeatherEl","weekDayEl","weatherDateEl","iconEl","iconUrl","error","concat","$dIxxU","get","_state","sent","console","log","Date","day","month","year","toLocaleDateString","toLocaleString","document","querySelector","innerHTML","Math","round","main","temp","weather","description","charAt","toUpperCase","slice","icon","setAttribute","$e9ba9e7dbb524f20$var$getCityName","$e9ba9e7dbb524f20$var$_getCityName","address","city","$e9ba9e7dbb524f20$var$getWeatherForecast","$e9ba9e7dbb524f20$var$_getWeatherForecast","name","country","list","forEach","forecast","dt","addEventListener","cityName","undefined","window","open","$e9ba9e7dbb524f20$var$openGoogleMaps","$e9ba9e7dbb524f20$export$8e52e9507eb580f3","position","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","coords","latitude","longitude"],"version":3,"file":"favourite.f3c25262.js.map"}